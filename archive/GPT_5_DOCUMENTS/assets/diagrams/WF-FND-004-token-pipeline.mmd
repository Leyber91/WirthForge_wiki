graph TB
    subgraph "DECIPHER Token-to-Energy Pipeline (Layer 3)"
        direction TB
        
        subgraph L2_INPUT["🔌 Layer 2 Interface"]
            L2_STREAM["Model Token Stream"]
            L2_CALLBACK["Stream Callback Handler"]
            L2_META["Token Metadata Capture"]
        end
        
        subgraph INGESTION["📥 Token Ingestion"]
            QUEUE["Thread-Safe Token Queue"]
            VALIDATOR["Token Validator"]
            TIMESTAMP["Timestamp Assignment"]
            METADATA["Metadata Enrichment"]
        end
        
        subgraph FRAME_LOOP["⏱️ 60Hz Frame Loop (16.67ms budget)"]
            FRAME_START["Frame Start (Timer)")
            DRAIN_QUEUE["Drain Token Queue"]
            BATCH_CHECK["Batch Size Check"]
            TIMEOUT_GUARD["Timeout Guard (16ms)")
        end
        
        subgraph ENERGY_CALC["⚡ Energy Calculation"]
            BASE_ENERGY["Base Energy (0.01 EU)"]
            COMPLEXITY["Complexity Factor"]
            SPEED_MULT["Speed Multiplier"]
            MODEL_FACTOR["Model Size Factor"]
            EU_RESULT["Final EU Value"]
        end
        
        subgraph STATE_MGT["📊 State Management"]
            ACCUMULATOR["Energy Accumulator"]
            EMA_FILTER["EMA Smoothing Filter"]
            METRICS["Performance Metrics"]
            HISTORY["Energy History Buffer"]
        end
        
        subgraph PATTERN_DETECT["🔍 Pattern Detection"]
            INTERFERENCE["Interference Analyzer"]
            RESONANCE["Resonance Detector"]
            THRESHOLD["Pattern Thresholds"]
            LEVEL_GATE["UX Level Gating"]
        end
        
        subgraph EVENT_EMIT["📡 Event Emission"]
            EVENT_BUILDER["Event Structure Builder"]
            PRIVACY_FILTER["Privacy Filter"]
            SERIALIZER["JSON Serializer"]
            L4_TRANSPORT["Layer 4 Transport"]
        end
        
        subgraph BACKPRESSURE["🚦 Backpressure Management"]
            QUEUE_MONITOR["Queue Size Monitor"]
            MERGE_POLICY["Token Merge Policy"]
            DROP_POLICY["Emergency Drop Policy"]
            DEGRADATION["Graceful Degradation"]
        end
    end
    
    %% Main Flow
    L2_STREAM -->|"Token Events"| L2_CALLBACK
    L2_CALLBACK -->|"Raw Tokens"| VALIDATOR
    VALIDATOR -->|"Valid Tokens"| QUEUE
    TIMESTAMP --> QUEUE
    METADATA --> QUEUE
    
    %% Frame Loop Processing
    FRAME_START -->|"Every 16.67ms"| DRAIN_QUEUE
    DRAIN_QUEUE -->|"Batched Tokens"| BATCH_CHECK
    BATCH_CHECK -->|"Process Batch"| BASE_ENERGY
    TIMEOUT_GUARD -.->|"Budget Check"| FRAME_START
    
    %% Energy Calculation Flow
    BASE_ENERGY --> COMPLEXITY
    COMPLEXITY --> SPEED_MULT
    SPEED_MULT --> MODEL_FACTOR
    MODEL_FACTOR --> EU_RESULT
    
    %% State Updates
    EU_RESULT --> ACCUMULATOR
    EU_RESULT --> EMA_FILTER
    ACCUMULATOR --> METRICS
    EMA_FILTER --> HISTORY
    
    %% Pattern Analysis (Conditional)
    EU_RESULT --> LEVEL_GATE
    LEVEL_GATE -->|"Level 2+"| INTERFERENCE
    LEVEL_GATE -->|"Level 5"| RESONANCE
    INTERFERENCE --> THRESHOLD
    RESONANCE --> THRESHOLD
    
    %% Event Generation
    ACCUMULATOR --> EVENT_BUILDER
    EMA_FILTER --> EVENT_BUILDER
    THRESHOLD --> EVENT_BUILDER
    EVENT_BUILDER --> PRIVACY_FILTER
    PRIVACY_FILTER --> SERIALIZER
    SERIALIZER --> L4_TRANSPORT
    
    %% Backpressure Handling
    QUEUE -->|"Size Monitoring"| QUEUE_MONITOR
    QUEUE_MONITOR -->|"Normal"| DRAIN_QUEUE
    QUEUE_MONITOR -->|"High Load"| MERGE_POLICY
    QUEUE_MONITOR -->|"Overload"| DROP_POLICY
    DROP_POLICY --> DEGRADATION
    
    %% Multi-Model Support
    subgraph MULTI_MODEL["🤖 Multi-Model Support"]
        MODEL_A["Model A Stream"]
        MODEL_B["Model B Stream"]
        MODEL_C["Model C Stream"]
        STREAM_ID["Stream Identification"]
    end
    
    MODEL_A --> STREAM_ID
    MODEL_B --> STREAM_ID
    MODEL_C --> STREAM_ID
    STREAM_ID --> L2_CALLBACK
    
    %% Interference Detection Detail
    INTERFERENCE -->|"Cross-Stream Analysis"| INTERFERENCE_CALC["Correlation Calculation"]
    INTERFERENCE_CALC -->|"Sync Detection"| INTERFERENCE_EVENT["Interference Event"]
    INTERFERENCE_EVENT --> EVENT_BUILDER
    
    %% Resonance Detection Detail
    RESONANCE -->|"Pattern Analysis"| RESONANCE_CALC["Frequency Analysis"]
    RESONANCE_CALC -->|"Threshold Check"| RESONANCE_EVENT["Resonance Event"]
    RESONANCE_EVENT --> EVENT_BUILDER
    
    %% Performance Monitoring
    subgraph MONITORING["📈 Performance Monitoring"]
        FRAME_TIMER["Frame Duration Timer"]
        OVERRUN_COUNTER["Overrun Counter"]
        THROUGHPUT["Token Throughput"]
        LATENCY["End-to-End Latency"]
    end
    
    FRAME_START --> FRAME_TIMER
    TIMEOUT_GUARD --> FRAME_TIMER
    FRAME_TIMER --> OVERRUN_COUNTER
    DRAIN_QUEUE --> THROUGHPUT
    L4_TRANSPORT --> LATENCY
    
    %% Tap Mechanism
    subgraph TAPS["🔍 Debug Taps"]
        ENERGY_TAP["Energy Calculation Tap"]
        PATTERN_TAP["Pattern Detection Tap"]
        PERFORMANCE_TAP["Performance Tap"]
        AUDIT_TAP["Audit Trail Tap"]
    end
    
    EU_RESULT -.->|"Debug Mode"| ENERGY_TAP
    THRESHOLD -.->|"Debug Mode"| PATTERN_TAP
    FRAME_TIMER -.->|"Debug Mode"| PERFORMANCE_TAP
    EVENT_BUILDER -.->|"Audit Mode"| AUDIT_TAP
    
    %% Color Coding
    classDef layer2 fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
    classDef layer3 fill:#e8f5e8,stroke:#388e3c,stroke-width:2px
    classDef layer4 fill:#fff3e0,stroke:#f57c00,stroke-width:2px
    classDef processing fill:#e3f2fd,stroke:#1976d2,stroke-width:2px
    classDef monitoring fill:#ffebee,stroke:#d32f2f,stroke-width:2px
    classDef optional fill:#f5f5f5,stroke:#757575,stroke-width:1px,stroke-dasharray: 5 5
    
    class L2_STREAM,L2_CALLBACK,L2_META,MODEL_A,MODEL_B,MODEL_C layer2
    class QUEUE,FRAME_LOOP,ENERGY_CALC,STATE_MGT,PATTERN_DETECT,EVENT_EMIT layer3
    class L4_TRANSPORT layer4
    class BASE_ENERGY,COMPLEXITY,SPEED_MULT,MODEL_FACTOR,EU_RESULT processing
    class FRAME_TIMER,OVERRUN_COUNTER,THROUGHPUT,LATENCY,MONITORING monitoring
    class TAPS,ENERGY_TAP,PATTERN_TAP,PERFORMANCE_TAP,AUDIT_TAP optional
