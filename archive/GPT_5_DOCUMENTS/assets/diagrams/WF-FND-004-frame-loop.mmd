graph TD
    subgraph "DECIPHER 60Hz Frame Loop (16.67ms Budget)"
        direction TD
        
        subgraph FRAME_START["🚀 Frame Initialization"]
            TIMER_START["High-Resolution Timer Start"]
            FRAME_ID["Generate Frame ID"]
            BUDGET_SET["Set 16.67ms Budget"]
            PRIORITY_QUEUE["Priority Task Queue"]
        end
        
        subgraph TOKEN_PROCESSING["📥 Token Processing (Priority 1)"]
            DRAIN_TOKENS["Drain Token Queue"]
            COUNT_CHECK["Token Count Check"]
            BATCH_DECISION["Batching Decision"]
            PROCESS_TOKENS["Process Token Batch"]
        end
        
        subgraph ENERGY_COMPUTATION["⚡ Energy Computation (Priority 1)"]
            CALC_START["Start Energy Calculation"]
            APPLY_FORMULA["Apply EU Formula"]
            ACCUMULATE["Accumulate Total Energy"]
            UPDATE_RATE["Update Energy Rate"]
        end
        
        subgraph STATE_UPDATES["📊 State Management (Priority 2)"]
            EMA_UPDATE["Update EMA Filters"]
            METRICS_UPDATE["Update Performance Metrics"]
            HISTORY_APPEND["Append to Energy History"]
            CLEANUP_OLD["Cleanup Old Data"]
        end
        
        subgraph PATTERN_ANALYSIS["🔍 Pattern Detection (Priority 3)"]
            LEVEL_CHECK["Check UX Level"]
            INTERFERENCE_CHECK["Interference Analysis"]
            RESONANCE_CHECK["Resonance Detection"]
            PATTERN_RESULTS["Pattern Results"]
        end
        
        subgraph EVENT_ASSEMBLY["📦 Event Assembly (Priority 1)"]
            BUILD_EVENT["Build Event Structure"]
            ADD_METADATA["Add Timestamp & Metadata"]
            PRIVACY_SCRUB["Privacy Scrubbing"]
            SERIALIZE_EVENT["Serialize to JSON"]
        end
        
        subgraph TIMING_CONTROL["⏱️ Timing & Budget Control"]
            TIME_CHECK["Check Elapsed Time"]
            BUDGET_REMAINING["Calculate Remaining Budget"]
            SKIP_DECISION["Skip Optional Tasks?"]
            OVERRUN_DETECT["Detect Budget Overrun"]
        end
        
        subgraph OUTPUT_EMISSION["📡 Event Emission (Priority 1)"]
            EMIT_EVENT["Emit to Layer 4"]
            CONFIRM_SENT["Confirm Transmission"]
            LOG_METRICS["Log Frame Metrics"]
            PREPARE_NEXT["Prepare Next Frame"]
        end
        
        subgraph ERROR_HANDLING["🚨 Error & Recovery"]
            EXCEPTION_CATCH["Exception Handler"]
            GRACEFUL_DEGRADE["Graceful Degradation"]
            ERROR_LOG["Error Logging"]
            RECOVERY_ATTEMPT["Recovery Attempt"]
        end
        
        subgraph ADAPTIVE_CONTROL["🎛️ Adaptive Performance"]
            LOAD_MONITOR["System Load Monitor"]
            FEATURE_TOGGLE["Dynamic Feature Toggle"]
            QUALITY_ADJUST["Quality Adjustment"]
            NEXT_FRAME_PLAN["Next Frame Planning"]
        end
    end
    
    %% Main Flow Path
    TIMER_START --> FRAME_ID
    FRAME_ID --> BUDGET_SET
    BUDGET_SET --> PRIORITY_QUEUE
    PRIORITY_QUEUE --> DRAIN_TOKENS
    
    %% Token Processing Flow
    DRAIN_TOKENS --> COUNT_CHECK
    COUNT_CHECK -->|"Normal Load"| PROCESS_TOKENS
    COUNT_CHECK -->|"High Load"| BATCH_DECISION
    BATCH_DECISION --> PROCESS_TOKENS
    
    %% Energy Calculation Flow
    PROCESS_TOKENS --> CALC_START
    CALC_START --> APPLY_FORMULA
    APPLY_FORMULA --> ACCUMULATE
    ACCUMULATE --> UPDATE_RATE
    
    %% Timing Checks Throughout
    PROCESS_TOKENS --> TIME_CHECK
    UPDATE_RATE --> TIME_CHECK
    TIME_CHECK --> BUDGET_REMAINING
    BUDGET_REMAINING -->|"Time Available"| EMA_UPDATE
    BUDGET_REMAINING -->|"Time Critical"| BUILD_EVENT
    
    %% State Management (Conditional)
    EMA_UPDATE --> METRICS_UPDATE
    METRICS_UPDATE --> HISTORY_APPEND
    HISTORY_APPEND --> CLEANUP_OLD
    CLEANUP_OLD --> TIME_CHECK
    
    %% Pattern Analysis (Conditional)
    TIME_CHECK -->|"Budget OK & Level 2+"| LEVEL_CHECK
    LEVEL_CHECK -->|"Level 2-4"| INTERFERENCE_CHECK
    LEVEL_CHECK -->|"Level 5"| RESONANCE_CHECK
    INTERFERENCE_CHECK --> PATTERN_RESULTS
    RESONANCE_CHECK --> PATTERN_RESULTS
    PATTERN_RESULTS --> TIME_CHECK
    
    %% Event Assembly (Always)
    TIME_CHECK --> BUILD_EVENT
    BUILD_EVENT --> ADD_METADATA
    ADD_METADATA --> PRIVACY_SCRUB
    PRIVACY_SCRUB --> SERIALIZE_EVENT
    
    %% Output and Completion
    SERIALIZE_EVENT --> EMIT_EVENT
    EMIT_EVENT --> CONFIRM_SENT
    CONFIRM_SENT --> LOG_METRICS
    LOG_METRICS --> PREPARE_NEXT
    
    %% Error Handling Paths
    PROCESS_TOKENS -.->|"Exception"| EXCEPTION_CATCH
    APPLY_FORMULA -.->|"Exception"| EXCEPTION_CATCH
    INTERFERENCE_CHECK -.->|"Exception"| EXCEPTION_CATCH
    EXCEPTION_CATCH --> GRACEFUL_DEGRADE
    GRACEFUL_DEGRADE --> ERROR_LOG
    ERROR_LOG --> RECOVERY_ATTEMPT
    RECOVERY_ATTEMPT --> BUILD_EVENT
    
    %% Budget Overrun Handling
    BUDGET_REMAINING -->|"Overrun Risk"| SKIP_DECISION
    SKIP_DECISION -->|"Skip Patterns"| BUILD_EVENT
    SKIP_DECISION -->|"Skip State"| BUILD_EVENT
    OVERRUN_DETECT -->|"Overrun Occurred"| GRACEFUL_DEGRADE
    
    %% Adaptive Control
    LOG_METRICS --> LOAD_MONITOR
    LOAD_MONITOR --> FEATURE_TOGGLE
    FEATURE_TOGGLE --> QUALITY_ADJUST
    QUALITY_ADJUST --> NEXT_FRAME_PLAN
    
    %% Frame Completion and Loop
    PREPARE_NEXT -->|"Sleep Until Next Frame"| TIMER_START
    
    %% Timing Annotations
    subgraph TIMING_BUDGET["⏱️ Timing Budget Breakdown"]
        T1["Token Processing: 2-4ms"]
        T2["Energy Calculation: 1-2ms"]
        T3["State Updates: 1-2ms"]
        T4["Pattern Analysis: 2-6ms"]
        T5["Event Assembly: 1-2ms"]
        T6["Emission: 1-2ms"]
        T7["Buffer: 2-4ms"]
        TOTAL["Total: ≤16.67ms"]
    end
    
    %% Performance Monitoring
    subgraph PERF_METRICS["📊 Performance Metrics"]
        FRAME_TIME["Actual Frame Duration"]
        OVERRUN_COUNT["Overrun Counter"]
        THROUGHPUT_RATE["Token Throughput"]
        SKIP_COUNT["Skipped Task Counter"]
        ERROR_RATE["Error Rate"]
    end
    
    LOG_METRICS --> FRAME_TIME
    OVERRUN_DETECT --> OVERRUN_COUNT
    DRAIN_TOKENS --> THROUGHPUT_RATE
    SKIP_DECISION --> SKIP_COUNT
    EXCEPTION_CATCH --> ERROR_RATE
    
    %% Hardware Tier Adaptations
    subgraph TIER_ADAPT["🖥️ Hardware Tier Adaptations"]
        LOW_TIER["Low Tier: Simplified Processing"]
        MID_TIER["Mid Tier: Full Features"]
        HIGH_TIER["High Tier: Enhanced Analysis"]
        HYBRID_TIER["Hybrid: Network Compensation"]
    end
    
    FEATURE_TOGGLE --> LOW_TIER
    FEATURE_TOGGLE --> MID_TIER
    FEATURE_TOGGLE --> HIGH_TIER
    FEATURE_TOGGLE --> HYBRID_TIER
    
    %% Backpressure Scenarios
    subgraph BACKPRESSURE["🚦 Backpressure Scenarios"]
        SCENARIO_1["Normal: Process All Tokens"]
        SCENARIO_2["Moderate: Batch & Merge"]
        SCENARIO_3["High: Defer to Next Frame"]
        SCENARIO_4["Critical: Emergency Drop"]
    end
    
    COUNT_CHECK --> SCENARIO_1
    COUNT_CHECK --> SCENARIO_2
    COUNT_CHECK --> SCENARIO_3
    COUNT_CHECK --> SCENARIO_4
    
    %% Color Coding
    classDef priority1 fill:#ffcdd2,stroke:#d32f2f,stroke-width:3px
    classDef priority2 fill:#fff3e0,stroke:#f57c00,stroke-width:2px
    classDef priority3 fill:#e8f5e8,stroke:#388e3c,stroke-width:2px
    classDef timing fill:#e3f2fd,stroke:#1976d2,stroke-width:2px
    classDef error fill:#fce4ec,stroke:#c2185b,stroke-width:2px
    classDef adaptive fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
    
    class TOKEN_PROCESSING,ENERGY_COMPUTATION,EVENT_ASSEMBLY,OUTPUT_EMISSION priority1
    class STATE_UPDATES priority2
    class PATTERN_ANALYSIS priority3
    class TIMING_CONTROL,TIMING_BUDGET,PERF_METRICS timing
    class ERROR_HANDLING error
    class ADAPTIVE_CONTROL,TIER_ADAPT adaptive
