{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "WIRTHFORGE Governance Policies Schema",
  "description": "Defines governance policies, sandbox configurations, and change management rules",
  "type": "object",
  "properties": {
    "core_invariants": {
      "type": "object",
      "description": "Immutable core principles that must never be violated",
      "properties": {
        "local_core": {
          "type": "boolean",
          "const": true,
          "description": "Core runs on user hardware, always"
        },
        "allow_docker": {
          "type": "boolean",
          "const": false,
          "description": "No Docker containers in core flows"
        },
        "target_frame_rate": {
          "type": "integer",
          "const": 60,
          "description": "Must sustain 60fps visuals"
        },
        "energy_visualization": {
          "type": "boolean",
          "const": true,
          "description": "All compute reflected as Energy"
        },
        "ui_presence": {
          "type": "boolean",
          "const": true,
          "description": "No core feature is invisible to user"
        },
        "consciousness_emergent": {
          "type": "boolean",
          "const": true,
          "description": "AI behaviors must emerge, not be hard-coded"
        }
      },
      "required": ["local_core", "allow_docker", "target_frame_rate", "energy_visualization", "ui_presence", "consciousness_emergent"],
      "additionalProperties": false
    },
    "change_types": {
      "type": "object",
      "description": "Classification of different types of changes and their requirements",
      "properties": {
        "minor_feature": {
          "type": "object",
          "properties": {
            "description": { "type": "string", "const": "New UI animation, minor module additions" },
            "examples": {
              "type": "array",
              "items": { "type": "string" },
              "const": ["UI animations", "minor modules", "cosmetic improvements"]
            },
            "required_approval": { "type": "string", "const": "Product owner + 1 reviewer" },
            "additional_requirements": {
              "type": "array",
              "items": { "type": "string" },
              "const": ["Must pass sandbox test", "Documentation update", "Performance validation"]
            },
            "version_impact": { "type": "string", "enum": ["patch", "minor"], "const": "minor" }
          },
          "required": ["description", "examples", "required_approval", "additional_requirements", "version_impact"]
        },
        "major_feature": {
          "type": "object",
          "properties": {
            "description": { "type": "string", "const": "New Path, new core module type, significant functionality" },
            "examples": {
              "type": "array",
              "items": { "type": "string" },
              "const": ["New user paths", "Core module types", "Major UI overhauls", "New interaction paradigms"]
            },
            "required_approval": { "type": "string", "const": "Governance board quorum" },
            "additional_requirements": {
              "type": "array",
              "items": { "type": "string" },
              "const": ["Full proposal document", "Extended sandbox testing", "Metrics review", "Community impact assessment"]
            },
            "version_impact": { "type": "string", "enum": ["minor", "major"], "const": "minor" }
          },
          "required": ["description", "examples", "required_approval", "additional_requirements", "version_impact"]
        },
        "model_integration": {
          "type": "object",
          "properties": {
            "description": { "type": "string", "const": "Add new AI model support" },
            "examples": {
              "type": "array",
              "items": { "type": "string" },
              "const": ["New local models", "Model architecture support", "Inference engine integration"]
            },
            "required_approval": { "type": "string", "const": "AI architect + performance lead" },
            "additional_requirements": {
              "type": "array",
              "items": { "type": "string" },
              "const": ["Benchmark in sandbox", "Energy calibration", "Local-first compliance", "Performance impact assessment"]
            },
            "version_impact": { "type": "string", "enum": ["minor"], "const": "minor" }
          },
          "required": ["description", "examples", "required_approval", "additional_requirements", "version_impact"]
        },
        "breaking_change": {
          "type": "object",
          "properties": {
            "description": { "type": "string", "const": "Remove field, change core logic, alter fundamental behavior" },
            "examples": {
              "type": "array",
              "items": { "type": "string" },
              "const": ["Schema changes", "API modifications", "Core principle adjustments", "Data format changes"]
            },
            "required_approval": { "type": "string", "const": "Full team consensus" },
            "additional_requirements": {
              "type": "array",
              "items": { "type": "string" },
              "const": ["Major version bump", "Full regression suite", "Migration path", "Extended deprecation period"]
            },
            "version_impact": { "type": "string", "enum": ["major"], "const": "major" }
          },
          "required": ["description", "examples", "required_approval", "additional_requirements", "version_impact"]
        },
        "urgent_patch": {
          "type": "object",
          "properties": {
            "description": { "type": "string", "const": "Critical bug fix, security patch" },
            "examples": {
              "type": "array",
              "items": { "type": "string" },
              "const": ["Security vulnerabilities", "Data corruption fixes", "Critical performance issues"]
            },
            "required_approval": { "type": "string", "const": "Tech lead approval" },
            "additional_requirements": {
              "type": "array",
              "items": { "type": "string" },
              "const": ["Regression tests on affected modules", "Post-deployment monitoring", "Rollback plan"]
            },
            "version_impact": { "type": "string", "enum": ["patch"], "const": "patch" }
          },
          "required": ["description", "examples", "required_approval", "additional_requirements", "version_impact"]
        }
      },
      "required": ["minor_feature", "major_feature", "model_integration", "breaking_change", "urgent_patch"]
    },
    "sandbox_policies": {
      "type": "object",
      "description": "Sandbox environment policies and restrictions",
      "properties": {
        "default_policy": {
          "type": "object",
          "properties": {
            "canReadEvents": {
              "type": "array",
              "items": { "type": "string" },
              "const": ["EnergyStream", "UserPrompt", "ModelOutput", "SystemMetrics"]
            },
            "canWriteEvents": {
              "type": "array",
              "items": { "type": "string" },
              "const": []
            },
            "allowUIRender": {
              "type": "boolean",
              "const": false
            },
            "allowPersistence": {
              "type": "boolean",
              "const": false
            },
            "maxMemoryMB": {
              "type": "integer",
              "const": 128
            },
            "maxExecutionTimeMs": {
              "type": "integer",
              "const": 5
            },
            "networkAccess": {
              "type": "string",
              "enum": ["none", "restricted", "full"],
              "const": "none"
            },
            "fileSystemAccess": {
              "type": "string",
              "enum": ["none", "temp_only", "read_only", "full"],
              "const": "temp_only"
            }
          },
          "required": ["canReadEvents", "canWriteEvents", "allowUIRender", "allowPersistence", "maxMemoryMB", "maxExecutionTimeMs", "networkAccess", "fileSystemAccess"]
        },
        "restricted_policy": {
          "type": "object",
          "properties": {
            "canReadEvents": {
              "type": "array",
              "items": { "type": "string" },
              "const": ["SystemMetrics"]
            },
            "canWriteEvents": {
              "type": "array",
              "items": { "type": "string" },
              "const": []
            },
            "allowUIRender": {
              "type": "boolean",
              "const": false
            },
            "allowPersistence": {
              "type": "boolean",
              "const": false
            },
            "maxMemoryMB": {
              "type": "integer",
              "const": 64
            },
            "maxExecutionTimeMs": {
              "type": "integer",
              "const": 2
            },
            "networkAccess": {
              "type": "string",
              "enum": ["none"],
              "const": "none"
            },
            "fileSystemAccess": {
              "type": "string",
              "enum": ["none"],
              "const": "none"
            }
          },
          "required": ["canReadEvents", "canWriteEvents", "allowUIRender", "allowPersistence", "maxMemoryMB", "maxExecutionTimeMs", "networkAccess", "fileSystemAccess"]
        },
        "development_policy": {
          "type": "object",
          "properties": {
            "canReadEvents": {
              "type": "array",
              "items": { "type": "string" },
              "const": ["EnergyStream", "UserPrompt", "ModelOutput", "SystemMetrics", "DebugEvents"]
            },
            "canWriteEvents": {
              "type": "array",
              "items": { "type": "string" },
              "const": ["DebugOutput"]
            },
            "allowUIRender": {
              "type": "boolean",
              "const": true
            },
            "allowPersistence": {
              "type": "boolean",
              "const": false
            },
            "maxMemoryMB": {
              "type": "integer",
              "const": 256
            },
            "maxExecutionTimeMs": {
              "type": "integer",
              "const": 10
            },
            "networkAccess": {
              "type": "string",
              "enum": ["restricted"],
              "const": "restricted"
            },
            "fileSystemAccess": {
              "type": "string",
              "enum": ["temp_only"],
              "const": "temp_only"
            }
          },
          "required": ["canReadEvents", "canWriteEvents", "allowUIRender", "allowPersistence", "maxMemoryMB", "maxExecutionTimeMs", "networkAccess", "fileSystemAccess"]
        }
      },
      "required": ["default_policy", "restricted_policy", "development_policy"]
    },
    "governance_board": {
      "type": "object",
      "description": "Governance board composition and responsibilities",
      "properties": {
        "roles": {
          "type": "object",
          "properties": {
            "technical_architect": {
              "type": "object",
              "properties": {
                "responsibilities": {
                  "type": "array",
                  "items": { "type": "string" },
                  "const": ["Performance analysis", "Security review", "Technical feasibility", "Architecture compliance"]
                },
                "required_for": {
                  "type": "array",
                  "items": { "type": "string" },
                  "const": ["major_feature", "model_integration", "breaking_change"]
                }
              },
              "required": ["responsibilities", "required_for"]
            },
            "design_lead": {
              "type": "object",
              "properties": {
                "responsibilities": {
                  "type": "array",
                  "items": { "type": "string" },
                  "const": ["UX consistency", "Visual design alignment", "User experience impact", "Accessibility compliance"]
                },
                "required_for": {
                  "type": "array",
                  "items": { "type": "string" },
                  "const": ["major_feature", "minor_feature", "breaking_change"]
                }
              },
              "required": ["responsibilities", "required_for"]
            },
            "lore_keeper": {
              "type": "object",
              "properties": {
                "responsibilities": {
                  "type": "array",
                  "items": { "type": "string" },
                  "const": ["Thematic alignment", "Mythology consistency", "Path balance", "Narrative coherence"]
                },
                "required_for": {
                  "type": "array",
                  "items": { "type": "string" },
                  "const": ["major_feature", "breaking_change"]
                }
              },
              "required": ["responsibilities", "required_for"]
            },
            "community_representative": {
              "type": "object",
              "properties": {
                "responsibilities": {
                  "type": "array",
                  "items": { "type": "string" },
                  "const": ["User benefit assessment", "Community impact", "Feedback integration", "Adoption considerations"]
                },
                "required_for": {
                  "type": "array",
                  "items": { "type": "string" },
                  "const": ["major_feature", "breaking_change"]
                }
              },
              "required": ["responsibilities", "required_for"]
            }
          },
          "required": ["technical_architect", "design_lead", "lore_keeper", "community_representative"]
        },
        "decision_thresholds": {
          "type": "object",
          "properties": {
            "simple_majority": {
              "type": "object",
              "properties": {
                "percentage": { "type": "number", "const": 0.51 },
                "applies_to": {
                  "type": "array",
                  "items": { "type": "string" },
                  "const": ["minor_feature", "urgent_patch"]
                }
              },
              "required": ["percentage", "applies_to"]
            },
            "supermajority": {
              "type": "object",
              "properties": {
                "percentage": { "type": "number", "const": 0.67 },
                "applies_to": {
                  "type": "array",
                  "items": { "type": "string" },
                  "const": ["major_feature", "model_integration"]
                }
              },
              "required": ["percentage", "applies_to"]
            },
            "consensus": {
              "type": "object",
              "properties": {
                "percentage": { "type": "number", "const": 1.0 },
                "applies_to": {
                  "type": "array",
                  "items": { "type": "string" },
                  "const": ["breaking_change"]
                }
              },
              "required": ["percentage", "applies_to"]
            }
          },
          "required": ["simple_majority", "supermajority", "consensus"]
        }
      },
      "required": ["roles", "decision_thresholds"]
    },
    "evaluation_criteria": {
      "type": "object",
      "description": "Criteria used to evaluate change proposals",
      "properties": {
        "principle_alignment": {
          "type": "object",
          "properties": {
            "weight": { "type": "number", "const": 0.3 },
            "questions": {
              "type": "array",
              "items": { "type": "string" },
              "const": [
                "Does this maintain local-first execution?",
                "Does this preserve 60fps performance?",
                "Does this maintain energy visualization integrity?",
                "Does this support emergent consciousness?",
                "Does this require UI presence for core features?"
              ]
            }
          },
          "required": ["weight", "questions"]
        },
        "technical_feasibility": {
          "type": "object",
          "properties": {
            "weight": { "type": "number", "const": 0.25 },
            "questions": {
              "type": "array",
              "items": { "type": "string" },
              "const": [
                "Is the implementation technically sound?",
                "Are the resource requirements reasonable?",
                "Does it integrate well with existing architecture?",
                "Are there any security concerns?",
                "Is it maintainable long-term?"
              ]
            }
          },
          "required": ["weight", "questions"]
        },
        "user_benefit": {
          "type": "object",
          "properties": {
            "weight": { "type": "number", "const": 0.25 },
            "questions": {
              "type": "array",
              "items": { "type": "string" },
              "const": [
                "Does this enhance user experience?",
                "Does this solve a real user problem?",
                "Is the benefit proportional to complexity?",
                "Does this align with user feedback?",
                "Will this be adopted by users?"
              ]
            }
          },
          "required": ["weight", "questions"]
        },
        "risk_assessment": {
          "type": "object",
          "properties": {
            "weight": { "type": "number", "const": 0.2 },
            "questions": {
              "type": "array",
              "items": { "type": "string" },
              "const": [
                "What are the potential failure modes?",
                "Can this be safely rolled back?",
                "Are there any breaking changes?",
                "What is the testing coverage?",
                "What are the long-term implications?"
              ]
            }
          },
          "required": ["weight", "questions"]
        }
      },
      "required": ["principle_alignment", "technical_feasibility", "user_benefit", "risk_assessment"]
    },
    "version_management": {
      "type": "object",
      "description": "Semantic versioning rules and policies",
      "properties": {
        "semver_rules": {
          "type": "object",
          "properties": {
            "patch": {
              "type": "object",
              "properties": {
                "description": { "type": "string", "const": "Bug fixes and minor improvements" },
                "triggers": {
                  "type": "array",
                  "items": { "type": "string" },
                  "const": ["Bug fixes", "Security patches", "Performance optimizations", "Documentation updates"]
                },
                "backward_compatible": { "type": "boolean", "const": true }
              },
              "required": ["description", "triggers", "backward_compatible"]
            },
            "minor": {
              "type": "object",
              "properties": {
                "description": { "type": "string", "const": "New functionality without breaking changes" },
                "triggers": {
                  "type": "array",
                  "items": { "type": "string" },
                  "const": ["New features", "New modules", "Enhanced capabilities", "New models"]
                },
                "backward_compatible": { "type": "boolean", "const": true }
              },
              "required": ["description", "triggers", "backward_compatible"]
            },
            "major": {
              "type": "object",
              "properties": {
                "description": { "type": "string", "const": "Breaking changes or core principle alterations" },
                "triggers": {
                  "type": "array",
                  "items": { "type": "string" },
                  "const": ["Breaking API changes", "Schema modifications", "Core principle adjustments", "Architectural overhauls"]
                },
                "backward_compatible": { "type": "boolean", "const": false }
              },
              "required": ["description", "triggers", "backward_compatible"]
            }
          },
          "required": ["patch", "minor", "major"]
        },
        "deprecation_policy": {
          "type": "object",
          "properties": {
            "notice_period_versions": { "type": "integer", "const": 2 },
            "support_period_versions": { "type": "integer", "const": 3 },
            "migration_assistance": { "type": "boolean", "const": true },
            "documentation_requirements": {
              "type": "array",
              "items": { "type": "string" },
              "const": ["Deprecation notice", "Migration guide", "Timeline", "Alternative solutions"]
            }
          },
          "required": ["notice_period_versions", "support_period_versions", "migration_assistance", "documentation_requirements"]
        }
      },
      "required": ["semver_rules", "deprecation_policy"]
    }
  },
  "required": ["core_invariants", "change_types", "sandbox_policies", "governance_board", "evaluation_criteria", "version_management"]
}
