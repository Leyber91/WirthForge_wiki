graph TB
    subgraph "Council Coordination System"
        subgraph "Council Formation"
            UserPrompt[User Prompt] --> Orchestrator[Experience Orchestrator]
            Orchestrator --> LevelCheck{User Level â‰¥ 2?}
            LevelCheck -->|No| SingleModel[Single Model Path<br/>Level 1 Lightning]
            LevelCheck -->|Yes| TierCheck{Hardware Tier Check}
            
            TierCheck --> LowTier[Low Tier: 2 Models Max<br/>Sequential if needed]
            TierCheck --> MidTier[Mid Tier: 3-4 Models<br/>Parallel execution]
            TierCheck --> HighTier[High Tier: 6 Models<br/>Full council capability]
        end
        
        subgraph "Model Selection & Dispatch"
            LowTier --> ModelSelect[Model Selection<br/>Based on user path]
            MidTier --> ModelSelect
            HighTier --> ModelSelect
            
            ModelSelect --> PathCheck{User Path}
            PathCheck -->|Forge| ForgeModels[Fast & Direct Models<br/>Action-oriented responses]
            PathCheck -->|Scholar| ScholarModels[Detailed & Cited Models<br/>Analytical responses]
            PathCheck -->|Sage| SageModels[Introspective Models<br/>Holistic responses]
            
            ForgeModels --> CouncilEngine[Council Engine]
            ScholarModels --> CouncilEngine
            SageModels --> CouncilEngine
        end
        
        subgraph "Parallel Execution"
            CouncilEngine --> CouncilID[Generate Council ID<br/>Session tracking]
            CouncilID --> ParallelDispatch[Parallel Model Dispatch<br/>Async execution]
            
            ParallelDispatch --> Model1[Model A<br/>Token Stream]
            ParallelDispatch --> Model2[Model B<br/>Token Stream]
            ParallelDispatch --> Model3[Model C<br/>Token Stream]
            ParallelDispatch --> ModelN[Model N<br/>Token Stream]
        end
        
        subgraph "Stream Processing"
            Model1 --> TokenProcessor[Token Stream Processor]
            Model2 --> TokenProcessor
            Model3 --> TokenProcessor
            ModelN --> TokenProcessor
            
            TokenProcessor --> InterferenceDetect[Interference Detection<br/>Timing correlation analysis]
            TokenProcessor --> EventEmission[Real-time Event Emission<br/>council.model_speak events]
            
            InterferenceDetect --> InterferenceEvent{Interference<br/>Detected?}
            InterferenceEvent -->|Yes| InterferenceAlert[Emit: council.interference<br/>Synchronized token patterns]
            InterferenceEvent -->|No| ContinueStream[Continue streaming]
        end
        
        subgraph "Synthesis & Completion"
            TokenProcessor --> CompletionCheck{All Models<br/>Completed?}
            CompletionCheck -->|No| ContinueStream
            CompletionCheck -->|Yes| SynthesisEngine[Synthesis Engine<br/>Combine outputs]
            
            SynthesisEngine --> ConsensusAlg[Consensus Algorithm<br/>Majority vote or best answer]
            ConsensusAlg --> FinalSynthesis[Final Synthesis Result]
            FinalSynthesis --> SynthesisEvent[Emit: council.synthesis<br/>Combined answer]
        end
        
        subgraph "Event Broadcasting"
            EventEmission --> EventBus[Orchestration Event Bus]
            InterferenceAlert --> EventBus
            SynthesisEvent --> EventBus
            
            EventBus --> Transport[Transport Layer L4]
            Transport --> UI[User Interface L5]
            
            UI --> StreamViz[Multi-Stream Visualization<br/>Color-coded model outputs]
            UI --> InterferenceViz[Interference Visualization<br/>Converging energy streams]
            UI --> SynthesisViz[Synthesis Display<br/>Final combined result]
        end
    end
    
    subgraph "Performance Management"
        PerfMonitor[Performance Monitor] --> FrameBudget[16.67ms Frame Budget<br/>60Hz compliance]
        FrameBudget --> LoadBalancer[Load Balancer<br/>Model distribution]
        LoadBalancer --> BackpressureCtrl[Backpressure Control<br/>Queue management]
        
        BackpressureCtrl --> DropPolicy[Drop Policy<br/>Graceful degradation]
        DropPolicy --> PriorityQueue[Priority Queue<br/>Critical events first]
    end
    
    %% Connect performance to main flow
    CouncilEngine -.-> PerfMonitor
    TokenProcessor -.-> FrameBudget
    EventBus -.-> BackpressureCtrl
    
    %% Styling
    classDef formation fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
    classDef execution fill:#e3f2fd,stroke:#1565c0,stroke-width:2px
    classDef processing fill:#f3e5f5,stroke:#6a1b9a,stroke-width:2px
    classDef synthesis fill:#fff8e1,stroke:#ef6c00,stroke-width:2px
    classDef performance fill:#ffebee,stroke:#c62828,stroke-width:2px
    classDef ui fill:#f1f8e9,stroke:#558b2f,stroke-width:2px
    
    class UserPrompt,Orchestrator,LevelCheck,TierCheck,LowTier,MidTier,HighTier formation
    class ModelSelect,PathCheck,ForgeModels,ScholarModels,SageModels,CouncilEngine,CouncilID,ParallelDispatch execution
    class Model1,Model2,Model3,ModelN,TokenProcessor,InterferenceDetect,EventEmission processing
    class CompletionCheck,SynthesisEngine,ConsensusAlg,FinalSynthesis,SynthesisEvent synthesis
    class PerfMonitor,FrameBudget,LoadBalancer,BackpressureCtrl,DropPolicy,PriorityQueue performance
    class Transport,UI,StreamViz,InterferenceViz,SynthesisViz ui
