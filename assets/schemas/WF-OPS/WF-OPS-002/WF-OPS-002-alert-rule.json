{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://wirthforge.org/schemas/WF-OPS-002-alert-rule.json",
  "title": "WIRTHFORGE Alert Rule Schema",
  "description": "Schema for defining alert rules in the WIRTHFORGE monitoring system",
  "type": "object",
  "required": [
    "id",
    "version",
    "name",
    "enabled",
    "severity",
    "conditions",
    "actions",
    "privacy"
  ],
  "properties": {
    "id": {
      "type": "string",
      "pattern": "^rule\\.[a-zA-Z0-9_-]+$",
      "description": "Unique identifier for the alert rule",
      "examples": [
        "rule.fps_cpu_pressure",
        "rule.model_performance_drop",
        "rule.memory_leak_detection"
      ]
    },
    "version": {
      "type": "string",
      "pattern": "^\\d+\\.\\d+$",
      "description": "Rule schema version",
      "default": "1.0"
    },
    "name": {
      "type": "string",
      "minLength": 1,
      "maxLength": 100,
      "description": "Human-readable name for the alert rule"
    },
    "description": {
      "type": "string",
      "maxLength": 500,
      "description": "Detailed description of what the rule monitors"
    },
    "enabled": {
      "type": "boolean",
      "description": "Whether the rule is currently active",
      "default": true
    },
    "severity": {
      "type": "string",
      "enum": [
        "info",
        "warning",
        "error",
        "critical"
      ],
      "description": "Alert severity level"
    },
    "category": {
      "type": "string",
      "enum": [
        "system",
        "model",
        "ui",
        "network",
        "security",
        "performance",
        "health"
      ],
      "description": "Alert category for organization"
    },
    "conditions": {
      "type": "object",
      "description": "Conditions that trigger the alert",
      "anyOf": [
        {
          "required": ["when_all"]
        },
        {
          "required": ["when_any"]
        },
        {
          "required": ["when_not"]
        }
      ],
      "properties": {
        "when_all": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/condition"
          },
          "description": "All conditions must be true (AND logic)"
        },
        "when_any": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/condition"
          },
          "description": "Any condition must be true (OR logic)"
        },
        "when_not": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/condition"
          },
          "description": "None of the conditions should be true (NOT logic)"
        }
      },
      "additionalProperties": false
    },
    "actions": {
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/action"
      },
      "description": "Actions to take when alert is triggered"
    },
    "debounce": {
      "type": "object",
      "description": "Debouncing configuration to prevent alert spam",
      "properties": {
        "cooldown_ms": {
          "type": "integer",
          "minimum": 1000,
          "maximum": 3600000,
          "description": "Minimum time between alerts in milliseconds"
        },
        "max_frequency": {
          "type": "string",
          "enum": [
            "1_per_second",
            "1_per_minute",
            "1_per_hour",
            "1_per_day"
          ],
          "description": "Maximum alert frequency"
        },
        "escalation": {
          "type": "object",
          "properties": {
            "after_count": {
              "type": "integer",
              "minimum": 2,
              "description": "Escalate after this many occurrences"
            },
            "after_duration_ms": {
              "type": "integer",
              "minimum": 60000,
              "description": "Escalate after this duration in milliseconds"
            },
            "upgrade_to": {
              "type": "string",
              "enum": ["warning", "error", "critical"],
              "description": "Severity to escalate to"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "privacy": {
      "type": "string",
      "enum": [
        "local_only",
        "shareable_anonymous",
        "shareable_with_consent"
      ],
      "description": "Privacy level for alert data",
      "default": "local_only"
    },
    "user_configurable": {
      "type": "boolean",
      "description": "Whether users can modify this rule",
      "default": true
    },
    "created_at": {
      "type": "string",
      "format": "date-time",
      "description": "Rule creation timestamp"
    },
    "updated_at": {
      "type": "string",
      "format": "date-time",
      "description": "Rule last update timestamp"
    },
    "tags": {
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9_-]+$"
      },
      "description": "Tags for rule organization and filtering"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "condition": {
      "type": "object",
      "required": [
        "metric",
        "operator",
        "value"
      ],
      "properties": {
        "metric": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_.-]+$",
          "description": "Metric path (e.g., 'system.cpu_percent', 'ui.frame_time_ms.p95')",
          "examples": [
            "system.cpu_percent",
            "system.memory_percent",
            "model.tokens_per_second",
            "ui.frame_time_ms.p95",
            "ui.dropped_frames"
          ]
        },
        "operator": {
          "type": "string",
          "enum": [
            ">",
            ">=",
            "<",
            "<=",
            "==",
            "!=",
            "contains",
            "not_contains",
            "regex"
          ],
          "description": "Comparison operator"
        },
        "value": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "string"
            },
            {
              "type": "boolean"
            }
          ],
          "description": "Value to compare against"
        },
        "window": {
          "type": "string",
          "enum": [
            "instant",
            "5s",
            "10s",
            "30s",
            "1m",
            "5m",
            "15m",
            "30m",
            "1h"
          ],
          "description": "Time window for condition evaluation",
          "default": "instant"
        },
        "aggregation": {
          "type": "string",
          "enum": [
            "avg",
            "min",
            "max",
            "sum",
            "count",
            "p50",
            "p95",
            "p99",
            "last"
          ],
          "description": "Aggregation function for windowed data",
          "default": "avg"
        },
        "baseline": {
          "type": "string",
          "enum": [
            "1m_avg",
            "5m_avg",
            "15m_avg",
            "1h_avg",
            "1d_avg",
            "7d_avg"
          ],
          "description": "Baseline period for comparison"
        },
        "threshold_type": {
          "type": "string",
          "enum": [
            "absolute",
            "percentage_change",
            "standard_deviation"
          ],
          "description": "Type of threshold comparison",
          "default": "absolute"
        }
      },
      "additionalProperties": false
    },
    "action": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "notify.toast",
            "notify.sound",
            "notify.dashboard",
            "log.audit",
            "log.debug",
            "suggest.mitigation",
            "suggest.diagnostic",
            "signal.backup",
            "signal.performance",
            "webhook.local"
          ],
          "description": "Type of action to execute"
        },
        "level": {
          "type": "string",
          "enum": [
            "info",
            "warning",
            "error",
            "critical"
          ],
          "description": "Action severity level"
        },
        "message": {
          "type": "string",
          "maxLength": 200,
          "description": "Message to display or log"
        },
        "duration_ms": {
          "type": "integer",
          "minimum": 1000,
          "maximum": 30000,
          "description": "Duration for temporary actions (e.g., toast display)"
        },
        "target": {
          "type": "string",
          "description": "Target for the action (e.g., dashboard panel, system component)"
        },
        "parameters": {
          "type": "object",
          "description": "Additional parameters for the action",
          "additionalProperties": true
        },
        "sound": {
          "type": "string",
          "enum": [
            "system_info",
            "system_warning",
            "system_error",
            "system_critical",
            "custom"
          ],
          "description": "Sound to play for audio notifications"
        },
        "volume": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Volume level for audio notifications (0-1)"
        },
        "panel": {
          "type": "string",
          "enum": [
            "system_overview",
            "model_performance",
            "ui_metrics",
            "alerts_panel",
            "analytics_dashboard"
          ],
          "description": "Dashboard panel to highlight"
        },
        "highlight": {
          "type": "string",
          "description": "Specific element to highlight in the panel"
        },
        "category": {
          "type": "string",
          "enum": [
            "system",
            "model",
            "ui",
            "network",
            "security",
            "performance",
            "health"
          ],
          "description": "Category for log entries"
        },
        "details": {
          "type": "string",
          "description": "Additional details for log entries"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of suggested actions for mitigation"
        },
        "url": {
          "type": "string",
          "format": "uri",
          "pattern": "^https?://127\\.0\\.0\\.1:",
          "description": "Local webhook URL (localhost only)"
        },
        "method": {
          "type": "string",
          "enum": ["GET", "POST", "PUT"],
          "description": "HTTP method for webhook",
          "default": "POST"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "HTTP headers for webhook"
        },
        "body": {
          "type": "object",
          "description": "Request body for webhook"
        }
      },
      "additionalProperties": false,
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "enum": ["notify.toast", "notify.dashboard"]
              }
            }
          },
          "then": {
            "required": ["message"]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "notify.sound"
              }
            }
          },
          "then": {
            "required": ["sound"]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "enum": ["log.audit", "log.debug"]
              }
            }
          },
          "then": {
            "required": ["category"]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "webhook.local"
              }
            }
          },
          "then": {
            "required": ["url"]
          }
        }
      ]
    }
  },
  "examples": [
    {
      "id": "rule.fps_cpu_pressure",
      "version": "1.0",
      "name": "Frame Budget Breach with High CPU",
      "description": "Detects sustained frame budget violations combined with high CPU usage",
      "enabled": true,
      "severity": "warning",
      "category": "performance",
      "conditions": {
        "when_all": [
          {
            "metric": "ui.frame_time_ms.p95",
            "operator": ">",
            "value": 16.67,
            "window": "10s",
            "aggregation": "p95"
          },
          {
            "metric": "system.cpu_percent",
            "operator": ">",
            "value": 85,
            "window": "10s",
            "aggregation": "avg"
          }
        ]
      },
      "actions": [
        {
          "type": "notify.toast",
          "level": "warning",
          "message": "Sustained frame budget breach + high CPU",
          "duration_ms": 5000
        },
        {
          "type": "suggest.mitigation",
          "target": "models.max_parallel",
          "message": "Consider reducing parallel model tasks",
          "actions": ["models.reduce_parallel", "ui.reduce_effects"]
        },
        {
          "type": "log.audit",
          "category": "performance",
          "details": "frame_budget_cpu_pressure"
        }
      ],
      "debounce": {
        "cooldown_ms": 30000,
        "max_frequency": "1_per_minute"
      },
      "privacy": "local_only",
      "user_configurable": true,
      "tags": ["performance", "ui", "cpu"]
    },
    {
      "id": "rule.model_performance_drop",
      "version": "1.0",
      "name": "Model Performance Degradation",
      "description": "Detects significant drops in model throughput or increases in latency",
      "enabled": true,
      "severity": "info",
      "category": "model",
      "conditions": {
        "when_any": [
          {
            "metric": "model.tokens_per_second",
            "operator": "<",
            "value": 50,
            "window": "30s",
            "aggregation": "avg",
            "baseline": "5m_avg",
            "threshold_type": "percentage_change"
          },
          {
            "metric": "model.ttft_ms",
            "operator": ">",
            "value": 500,
            "window": "30s",
            "aggregation": "p95"
          }
        ]
      },
      "actions": [
        {
          "type": "notify.dashboard",
          "panel": "model_performance",
          "highlight": "throughput_chart",
          "message": "Model performance degradation detected"
        },
        {
          "type": "suggest.diagnostic",
          "message": "Run model diagnostics to identify bottlenecks",
          "target": "diagnostics.run_model_check"
        },
        {
          "type": "log.debug",
          "category": "model",
          "details": "performance_degradation"
        }
      ],
      "debounce": {
        "cooldown_ms": 60000,
        "escalation": {
          "after_count": 3,
          "upgrade_to": "warning"
        }
      },
      "privacy": "local_only",
      "user_configurable": true,
      "tags": ["model", "performance", "throughput"]
    },
    {
      "id": "rule.system_resource_pressure",
      "version": "1.0",
      "name": "System Resource Pressure",
      "description": "Multi-resource pressure detection with escalation and backup deferral",
      "enabled": true,
      "severity": "warning",
      "category": "system",
      "conditions": {
        "when_all": [
          {
            "metric": "system.cpu_percent",
            "operator": ">",
            "value": 85,
            "window": "15s",
            "aggregation": "avg"
          },
          {
            "metric": "system.memory_percent",
            "operator": ">",
            "value": 90,
            "window": "15s",
            "aggregation": "avg"
          }
        ]
      },
      "actions": [
        {
          "type": "notify.toast",
          "level": "warning",
          "message": "High system resource usage detected",
          "duration_ms": 8000
        },
        {
          "type": "notify.sound",
          "sound": "system_warning",
          "volume": 0.7
        },
        {
          "type": "suggest.mitigation",
          "target": "system.reduce_load",
          "message": "Consider pausing non-critical tasks",
          "actions": [
            "models.pause_background",
            "ui.reduce_effects",
            "monitoring.reduce_frequency"
          ]
        },
        {
          "type": "signal.backup",
          "message": "defer_backup_high_load",
          "duration_ms": 300000
        },
        {
          "type": "log.audit",
          "category": "system",
          "details": "resource_pressure_critical"
        }
      ],
      "debounce": {
        "cooldown_ms": 120000,
        "escalation": {
          "after_duration_ms": 300000,
          "upgrade_to": "critical"
        }
      },
      "privacy": "local_only",
      "user_configurable": true,
      "tags": ["system", "resources", "cpu", "memory"]
    }
  ]
}
