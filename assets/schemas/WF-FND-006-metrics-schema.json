{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "WIRTHFORGE Metrics Collection Schema",
  "description": "Defines metrics collection, monitoring thresholds, and adaptive feedback mechanisms",
  "type": "object",
  "properties": {
    "metrics_categories": {
      "type": "object",
      "description": "Core categories of metrics collected by the system",
      "properties": {
        "progression_metrics": {
          "type": "object",
          "properties": {
            "energy_per_hour": {
              "type": "object",
              "properties": {
                "description": { "type": "string", "const": "Energy Units accumulated per hour of active use" },
                "unit": { "type": "string", "const": "EU/hour" },
                "healthy_range": {
                  "type": "object",
                  "properties": {
                    "min": { "type": "number", "const": 50.0 },
                    "max": { "type": "number", "const": 200.0 }
                  },
                  "required": ["min", "max"]
                },
                "collection_frequency": { "type": "string", "const": "continuous" }
              },
              "required": ["description", "unit", "healthy_range", "collection_frequency"]
            },
            "level_advancement_rate": {
              "type": "object",
              "properties": {
                "description": { "type": "string", "const": "Average time to advance between levels" },
                "unit": { "type": "string", "const": "hours" },
                "healthy_range": {
                  "type": "object",
                  "properties": {
                    "level_2": { "type": "number", "const": 8.0 },
                    "level_3": { "type": "number", "const": 24.0 },
                    "level_4": { "type": "number", "const": 72.0 },
                    "level_5": { "type": "number", "const": 120.0 }
                  },
                  "required": ["level_2", "level_3", "level_4", "level_5"]
                },
                "collection_frequency": { "type": "string", "const": "on_level_change" }
              },
              "required": ["description", "unit", "healthy_range", "collection_frequency"]
            },
            "mastery_score_progression": {
              "type": "object",
              "properties": {
                "description": { "type": "string", "const": "Rate of mastery score improvement over time" },
                "unit": { "type": "string", "const": "score_delta/hour" },
                "healthy_range": {
                  "type": "object",
                  "properties": {
                    "min": { "type": "number", "const": 0.01 },
                    "max": { "type": "number", "const": 0.1 }
                  },
                  "required": ["min", "max"]
                },
                "collection_frequency": { "type": "string", "const": "hourly" }
              },
              "required": ["description", "unit", "healthy_range", "collection_frequency"]
            }
          },
          "required": ["energy_per_hour", "level_advancement_rate", "mastery_score_progression"]
        },
        "energy_fidelity_metrics": {
          "type": "object",
          "properties": {
            "compute_visual_alignment": {
              "type": "object",
              "properties": {
                "description": { "type": "string", "const": "Ratio of energy particles generated to actual tokens processed" },
                "unit": { "type": "string", "const": "ratio" },
                "target_value": { "type": "number", "const": 1.0 },
                "tolerance": { "type": "number", "const": 0.05 },
                "collection_frequency": { "type": "string", "const": "per_generation" }
              },
              "required": ["description", "unit", "target_value", "tolerance", "collection_frequency"]
            },
            "visual_synchronization": {
              "type": "object",
              "properties": {
                "description": { "type": "string", "const": "Time delay between computation and visual representation" },
                "unit": { "type": "string", "const": "milliseconds" },
                "target_value": { "type": "number", "const": 0.0 },
                "max_acceptable": { "type": "number", "const": 50.0 },
                "collection_frequency": { "type": "string", "const": "per_frame" }
              },
              "required": ["description", "unit", "target_value", "max_acceptable", "collection_frequency"]
            },
            "user_satisfaction_rating": {
              "type": "object",
              "properties": {
                "description": { "type": "string", "const": "User feedback ratings on visual experience quality" },
                "unit": { "type": "string", "const": "scale_1_to_5" },
                "target_value": { "type": "number", "const": 4.0 },
                "min_acceptable": { "type": "number", "const": 3.5 },
                "collection_frequency": { "type": "string", "const": "session_end" }
              },
              "required": ["description", "unit", "target_value", "min_acceptable", "collection_frequency"]
            }
          },
          "required": ["compute_visual_alignment", "visual_synchronization", "user_satisfaction_rating"]
        },
        "performance_metrics": {
          "type": "object",
          "properties": {
            "system_latency": {
              "type": "object",
              "properties": {
                "description": { "type": "string", "const": "Time from user prompt to complete system response" },
                "unit": { "type": "string", "const": "milliseconds" },
                "targets": {
                  "type": "object",
                  "properties": {
                    "p50": { "type": "number", "const": 1000.0 },
                    "p95": { "type": "number", "const": 2000.0 },
                    "p99": { "type": "number", "const": 5000.0 }
                  },
                  "required": ["p50", "p95", "p99"]
                },
                "collection_frequency": { "type": "string", "const": "per_request" }
              },
              "required": ["description", "unit", "targets", "collection_frequency"]
            },
            "frame_rate_stability": {
              "type": "object",
              "properties": {
                "description": { "type": "string", "const": "Maintenance of 60 FPS target with frame drop tracking" },
                "unit": { "type": "string", "const": "fps" },
                "target_fps": { "type": "number", "const": 60.0 },
                "min_acceptable_fps": { "type": "number", "const": 55.0 },
                "max_dropped_frames_per_minute": { "type": "integer", "const": 5 },
                "collection_frequency": { "type": "string", "const": "per_frame" }
              },
              "required": ["description", "unit", "target_fps", "min_acceptable_fps", "max_dropped_frames_per_minute", "collection_frequency"]
            },
            "resource_utilization": {
              "type": "object",
              "properties": {
                "description": { "type": "string", "const": "CPU, memory, and GPU utilization during operation" },
                "unit": { "type": "string", "const": "percentage" },
                "healthy_ranges": {
                  "type": "object",
                  "properties": {
                    "cpu_max": { "type": "number", "const": 80.0 },
                    "memory_max": { "type": "number", "const": 85.0 },
                    "gpu_max": { "type": "number", "const": 90.0 }
                  },
                  "required": ["cpu_max", "memory_max", "gpu_max"]
                },
                "collection_frequency": { "type": "string", "const": "every_5_seconds" }
              },
              "required": ["description", "unit", "healthy_ranges", "collection_frequency"]
            }
          },
          "required": ["system_latency", "frame_rate_stability", "resource_utilization"]
        },
        "error_and_anomaly_metrics": {
          "type": "object",
          "properties": {
            "module_error_rate": {
              "type": "object",
              "properties": {
                "description": { "type": "string", "const": "Frequency of module timeouts, crashes, and failures" },
                "unit": { "type": "string", "const": "errors_per_hour" },
                "max_acceptable": { "type": "number", "const": 1.0 },
                "alert_threshold": { "type": "number", "const": 5.0 },
                "collection_frequency": { "type": "string", "const": "on_error" }
              },
              "required": ["description", "unit", "max_acceptable", "alert_threshold", "collection_frequency"]
            },
            "sandbox_violations": {
              "type": "object",
              "properties": {
                "description": { "type": "string", "const": "Attempts to violate sandbox policies or security boundaries" },
                "unit": { "type": "string", "const": "violations_per_session" },
                "max_acceptable": { "type": "number", "const": 0.0 },
                "alert_threshold": { "type": "number", "const": 1.0 },
                "collection_frequency": { "type": "string", "const": "on_violation" }
              },
              "required": ["description", "unit", "max_acceptable", "alert_threshold", "collection_frequency"]
            },
            "orchestrator_restarts": {
              "type": "object",
              "properties": {
                "description": { "type": "string", "const": "Frequency of orchestrator or core system restarts" },
                "unit": { "type": "string", "const": "restarts_per_day" },
                "max_acceptable": { "type": "number", "const": 0.1 },
                "alert_threshold": { "type": "number", "const": 1.0 },
                "collection_frequency": { "type": "string", "const": "on_restart" }
              },
              "required": ["description", "unit", "max_acceptable", "alert_threshold", "collection_frequency"]
            }
          },
          "required": ["module_error_rate", "sandbox_violations", "orchestrator_restarts"]
        }
      },
      "required": ["progression_metrics", "energy_fidelity_metrics", "performance_metrics", "error_and_anomaly_metrics"]
    },
    "metrics_snapshot_schema": {
      "type": "object",
      "description": "Schema for individual metrics snapshots",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 timestamp of the snapshot"
        },
        "session_id": {
          "type": "string",
          "description": "Unique identifier for the user session"
        },
        "user_id": {
          "type": "string",
          "description": "Anonymized user identifier"
        },
        "progression_rate": {
          "type": "number",
          "description": "Current progression rate in levels per hour"
        },
        "energy_fidelity": {
          "type": "number",
          "minimum": 0.0,
          "maximum": 1.0,
          "description": "Visual vs actual compute alignment ratio"
        },
        "avg_latency_ms": {
          "type": "number",
          "minimum": 0,
          "description": "Average system latency in milliseconds"
        },
        "p95_latency_ms": {
          "type": "number",
          "minimum": 0,
          "description": "95th percentile latency in milliseconds"
        },
        "avg_frame_rate": {
          "type": "number",
          "minimum": 0,
          "description": "Average frame rate in FPS"
        },
        "frame_drops": {
          "type": "integer",
          "minimum": 0,
          "description": "Number of dropped frames in the measurement period"
        },
        "module_error_count": {
          "type": "integer",
          "minimum": 0,
          "description": "Number of module errors in the measurement period"
        },
        "cpu_utilization": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "description": "CPU utilization percentage"
        },
        "memory_utilization": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "description": "Memory utilization percentage"
        },
        "gpu_utilization": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "description": "GPU utilization percentage"
        }
      },
      "required": ["timestamp", "session_id", "user_id", "progression_rate", "energy_fidelity", "avg_latency_ms", "p95_latency_ms", "avg_frame_rate", "frame_drops", "module_error_count"]
    },
    "adaptive_thresholds": {
      "type": "object",
      "description": "Thresholds that trigger adaptive responses",
      "properties": {
        "performance_protection": {
          "type": "object",
          "properties": {
            "frame_rate_threshold": {
              "type": "object",
              "properties": {
                "trigger_fps": { "type": "number", "const": 55.0 },
                "response": { "type": "string", "const": "reduce_visual_effects" },
                "severity": { "type": "string", "enum": ["low", "medium", "high"], "const": "medium" }
              },
              "required": ["trigger_fps", "response", "severity"]
            },
            "latency_threshold": {
              "type": "object",
              "properties": {
                "trigger_ms": { "type": "number", "const": 3000.0 },
                "response": { "type": "string", "const": "suggest_optimization" },
                "severity": { "type": "string", "enum": ["low", "medium", "high"], "const": "high" }
              },
              "required": ["trigger_ms", "response", "severity"]
            },
            "resource_threshold": {
              "type": "object",
              "properties": {
                "cpu_trigger": { "type": "number", "const": 90.0 },
                "memory_trigger": { "type": "number", "const": 95.0 },
                "response": { "type": "string", "const": "apply_temporary_limits" },
                "severity": { "type": "string", "enum": ["low", "medium", "high"], "const": "high" }
              },
              "required": ["cpu_trigger", "memory_trigger", "response", "severity"]
            }
          },
          "required": ["frame_rate_threshold", "latency_threshold", "resource_threshold"]
        },
        "progression_balancing": {
          "type": "object",
          "properties": {
            "slow_progression_threshold": {
              "type": "object",
              "properties": {
                "trigger_rate": { "type": "number", "const": 0.5 },
                "response": { "type": "string", "const": "increase_energy_rewards" },
                "severity": { "type": "string", "enum": ["low", "medium", "high"], "const": "low" }
              },
              "required": ["trigger_rate", "response", "severity"]
            },
            "fast_progression_threshold": {
              "type": "object",
              "properties": {
                "trigger_rate": { "type": "number", "const": 3.0 },
                "response": { "type": "string", "const": "cap_rewards_with_explanation" },
                "severity": { "type": "string", "enum": ["low", "medium", "high"], "const": "medium" }
              },
              "required": ["trigger_rate", "response", "severity"]
            }
          },
          "required": ["slow_progression_threshold", "fast_progression_threshold"]
        },
        "energy_fidelity_calibration": {
          "type": "object",
          "properties": {
            "visual_lag_threshold": {
              "type": "object",
              "properties": {
                "trigger_delay_ms": { "type": "number", "const": 100.0 },
                "response": { "type": "string", "const": "recalibrate_particle_generation" },
                "severity": { "type": "string", "enum": ["low", "medium", "high"], "const": "medium" }
              },
              "required": ["trigger_delay_ms", "response", "severity"]
            },
            "sync_threshold": {
              "type": "object",
              "properties": {
                "trigger_ratio": { "type": "number", "const": 0.9 },
                "response": { "type": "string", "const": "real_time_sync_adjustment" },
                "severity": { "type": "string", "enum": ["low", "medium", "high"], "const": "high" }
              },
              "required": ["trigger_ratio", "response", "severity"]
            }
          },
          "required": ["visual_lag_threshold", "sync_threshold"]
        }
      },
      "required": ["performance_protection", "progression_balancing", "energy_fidelity_calibration"]
    },
    "feedback_mechanisms": {
      "type": "object",
      "description": "How metrics feed back into system behavior",
      "properties": {
        "real_time_adaptations": {
          "type": "object",
          "properties": {
            "automatic_responses": {
              "type": "array",
              "items": { "type": "string" },
              "const": [
                "Dynamic visual quality adjustment",
                "Resource limit enforcement",
                "Performance mode switching",
                "Emergency feature disabling"
              ]
            },
            "user_notifications": {
              "type": "array",
              "items": { "type": "string" },
              "const": [
                "Performance optimization suggestions",
                "Hardware upgrade recommendations",
                "Usage pattern insights",
                "System health alerts"
              ]
            }
          },
          "required": ["automatic_responses", "user_notifications"]
        },
        "governance_feedback": {
          "type": "object",
          "properties": {
            "development_insights": {
              "type": "array",
              "items": { "type": "string" },
              "const": [
                "Feature usage patterns",
                "Performance bottleneck identification",
                "User satisfaction trends",
                "System stability metrics"
              ]
            },
            "decision_support": {
              "type": "array",
              "items": { "type": "string" },
              "const": [
                "Feature prioritization data",
                "Resource allocation guidance",
                "Risk assessment metrics",
                "User impact analysis"
              ]
            }
          },
          "required": ["development_insights", "decision_support"]
        }
      },
      "required": ["real_time_adaptations", "governance_feedback"]
    },
    "collection_configuration": {
      "type": "object",
      "description": "Configuration for metrics collection system",
      "properties": {
        "privacy_settings": {
          "type": "object",
          "properties": {
            "anonymize_user_data": { "type": "boolean", "const": true },
            "exclude_content": { "type": "boolean", "const": true },
            "local_storage_only": { "type": "boolean", "const": true },
            "opt_in_cloud_aggregation": { "type": "boolean", "const": false }
          },
          "required": ["anonymize_user_data", "exclude_content", "local_storage_only", "opt_in_cloud_aggregation"]
        },
        "retention_policy": {
          "type": "object",
          "properties": {
            "local_retention_days": { "type": "integer", "const": 30 },
            "aggregated_retention_days": { "type": "integer", "const": 365 },
            "automatic_cleanup": { "type": "boolean", "const": true }
          },
          "required": ["local_retention_days", "aggregated_retention_days", "automatic_cleanup"]
        },
        "performance_impact": {
          "type": "object",
          "properties": {
            "max_collection_overhead": { "type": "number", "const": 0.05 },
            "batch_size": { "type": "integer", "const": 100 },
            "collection_interval_ms": { "type": "integer", "const": 1000 }
          },
          "required": ["max_collection_overhead", "batch_size", "collection_interval_ms"]
        }
      },
      "required": ["privacy_settings", "retention_policy", "performance_impact"]
    }
  },
  "required": ["metrics_categories", "metrics_snapshot_schema", "adaptive_thresholds", "feedback_mechanisms", "collection_configuration"]
}
